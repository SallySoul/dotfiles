#!/usr/bin/env perl
use strict;
use warnings;

use Cortex;
use Getopt::Long;
use Params::Validate qw(:all);

my $buildRootURLRegex = qr/(?:nfs:\/\/)?ifscluster\d+\.apple\.com:?\/ifs\/(?:iOS\/)?BuildRoots\/(BuildRoot\d+)/;
my $buildRootIDPath = "/BuildRoot/.buildrootID";
my $cortex = Cortex->new();

sub getCortexBuildRoot {
    my %options = validate (
        @_,
        {   train => { type => SCALAR, optional => 0 },
        }
    );

    my @cortexResults = $cortex->listTrainAttributes(
        train => $options{'train'},
        returnFields => [ 'buildRootURL' ],
    );

    my $buildRootURL = $cortexResults[0]->buildRootURL();
    $buildRootURL =~ $buildRootURLRegex;
    my $buildRoot = $1;

    return $buildRoot;
}

sub getMountedBuildRoot {
    my $pipeHandle;
    
    if ( ! open $pipeHandle, '-|', 'mount' ) {
        die "ERROR: unable to open pipe to mount command\n$!\n";
    }

    while (my $line = <$pipeHandle>) {
        if ($line =~ $buildRootURLRegex) {
            return $1;
        }
    }
}

sub main {
    my $cortexBuildRoot = getCortexBuildRoot(train => $ENV{'TRAIN'});
    my $mountedBuildRoot = getMountedBuildRoot();

    print "BuildRoot info:\n";
    print "cortex:   $cortexBuildRoot\n";
    print "mounted:  $mountedBuildRoot\n";
    print "\n";
    
    my $buildRootIDHandle;
    if ( ! open $buildRootIDHandle, "<", $buildRootIDPath ) {
        die "ERROR: unable to open $buildRootIDPath\n$!\n"; 
    }
    
    print "Mounted BuildRoot's .buildrootID\n"; 
    print "Update Used          - Date                     - config used     - user\n";
    print "========================================================================\n";
    while (my $line = <$buildRootIDHandle>) {
        print $line;
    }
}

main();

