#!/usr/bin/env perl
use strict;
use warnings;

use Cortex;
use Getopt::Long;
use Params::Validate qw(:all);

sub usage {
    print "ERROR: $_[0]\n\n" if $_[0];

    my $message = "
Sets all the projects in a deps file to use the train defualt targetArchitectures
ags:
    -input <file>               The deps file to use. These are the projects to revert
    -train                      The train to make the changes to. 

Options:
    -help                       Brings up the usage menu
";   

    print $message;
    
    exit 1; 
}

sub parseArgs {
    my %args;
    
    usage()
        unless GetOptions(
            \%args, 'input=s', 'help',
            'train=s'
        );

    # Validate input
    usage if $args{help};
    usage("You must pass -input <file") if ! $args{input};
    usage("You must pass -train <train>") if ! $args{train};

    return %args;    
}

sub main {
    my %args = parseArgs();

    my $cortex = Cortex->new();
    
    my $input_handle;
    if ( ! open $input_handle, '<', $args{input} ) {
        print "ERROR: Unable to open handle to $args{input}\n$!\n";
    }
    
    my @projects;
    while (my $line = <$input_handle>) {
        $line =~ /^(.*)$/;
        push @projects, $1; 
    }
    
    my $project_count = scalar @projects;
    for (my $i = 0; $i < $project_count; $i +=1) {
        my $project = $projects[$i];
        print "Setting rule for $project, $i / $project_count\n";

        my @cortex_results; 
        eval {
            @cortex_results = $cortex->setProjectRule(
                project => $project,
                train => $args{train},
                targetArchitectures => Cortex::CORTEX_NULL,
              
            );
        };

        if (! $cortex_results[0]) {
            print "ERROR: Unable to set defualt for $project\n";
        }
    }
}

main();

