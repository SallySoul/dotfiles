#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use File::Glob;

sub usage {
    my $program = "patchInspector";

    die <<"EOF"
PURPOSE:
    Use this tool to investigate the state of c4 patch stuff.
USAGE:
    $program [OPTIONS]
    
OPTIONAL PARAMETERS:
    -h / --help     Display the usage message
    -printLogPath   Display the path of the BEAR log to be parsed
    -log <log file> Parse the given log file, instead of latest log file. 
EOF
}

my $masterActionURL;
my $shipActionURL;
my $printLogPathFlag;
my $helpFlag;
my $logFile;

sub parseArgs {
    GetOptions(
        'printLogPath|?'    => \$printLogPathFlag,
        'help|?'            => \$helpFlag,
        'log=s'             => \$logFile,
    ) or usage();

    if ($helpFlag) {
        usage();
    }
}

sub getLogFile {
    my ($patchLogDir);
    opendir($patchLogDir, "/Logs/Mastering/") || die "Cannot open /Logs/Mastering/\n";

    # Sort by date modified, we want the most recent 
    my @patchLogs = sort {(stat "/Logs/Mastering/$b")[10] cmp (stat "/Logs/Mastering/$a")[10]} (readdir $patchLogDir);
    my $finalUploadsReg = qr{masterPatches};
    while (my $patchLog = shift @patchLogs) {
        if ( $patchLog =~ /$finalUploadsReg/) {
            $logFile = $patchLog;
            last;
        }
    }
    close ($patchLogDir);

    if (!$logFile) {
        die "Could not find a masterPatches log...\n";
    }
    $logFile = "/Logs/Mastering/" . $logFile;
}

sub readInfo {
    my $shipNext = 0;
    my $masterNext = 0;

    open my $info, $logFile or die "Could not open $logFile: $!";
    while( my $line = <$info>)  {   
        if ($line =~ /Successfully queued masterImages/) {
            $masterNext = 1;
            next;
        }
        if ($masterNext) {
            $line =~ /(.*)\n$/;
            $masterActionURL = $1;
            $masterNext = 0;
        }
        if ($line =~/Successfully queued shipImages action/) {
            $shipNext = 1;
            next;
        }
        if ($shipNext) {
            $line =~ /(.*)\n$/;
            $shipActionURL = $1;
            $shipNext = 0;
        }
        
        #May add patch table stuff later ...
        if ($masterActionURL && $shipActionURL) {
            last;
        }
    }
    close $info;
}

sub main {
    parseArgs();
    if (!$logFile) {
        getLogFile();
    }
    if ($printLogPathFlag) {
        print "log: $logFile\n";
    }

    readInfo();
    print "Master Action URL: $masterActionURL\n";
    print "Ship Action URL: $shipActionURL\n";

    my $masterCommand = "curl $masterActionURL \| xbs json_xs";
    my $shipCommand = "curl  $shipActionURL | xbs json_xs";
    
    print "Getting Master Action URL\n";
    system($masterCommand);
    print "\nGetting Shipping Action URL\n";
    system($shipCommand);;
}

main();
