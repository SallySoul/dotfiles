#!/usr/bin/env perl
use strict;
use warnings;

use Cortex;
use Getopt::Long;
use Params::Validate qw(:all);

my @projects_to_preserve = (
    'PlugInKit_libraries_Sim',
    'CrashReporterClient_Sim',
    'arclite_iOS_Sim'
);

my @non_sim_projects_to_remove = (
    'swiftlang_overlay',
    'swiftlang',
    'libdarwintest_host',
);

sub usage {
    print "ERROR: $_[0]\n\n" if $_[0];

    my $message = "
This tool formalizes removing the i386 target architecture from Sim projects

Mandatory Flags:
    -train <train>              The train to make the changes on

Options:
    -execute                    The tool won't make changes unless this flag is passed
    -output <file>              Output all Sim projects changed to a deps file


    -help                       Brings up the usage menu
";

    print $message;

    exit 1;
}

sub parseArgs {
    my %args;

    usage()
        unless GetOptions(
            \%args, 'train=s', 'help',
            'output=s', 'execute'
        );

    # Validate input
    usage if $args{help};
    usage("You must pass -train <train>") if ! $args{train};

    return %args;
}

sub main {
    my %args = parseArgs();

    my $cortex = Cortex->new();

    # A simple map to lookup if a project should be preserved
    my %preserve_map;
    map { $preserve_map{$_} = 1 } @projects_to_preserve;

    # A map to lookup if a project should be changed but is not a sim project
    my %non_sim_map;
    map { $non_sim_map{$_} = 1 } @non_sim_projects_to_remove;

    my $output_handle;
    if ($args{output}) {
        if ( ! open($output_handle, '>', $args{output}) ) {
            print "ERROR: unable to open handle to $args{output}\n$!\n";
            exit 1;
        }
    }

    print "Getting all projects for $args{train}...\n";
    my @cortex_results = $cortex->listProjectAttributes(
        train => $args{train},
        returnFields => [ 'project', 'targetArchitectures' ]
    );

    print "Finding all Sim projects for $args{train}...\n";
    my %sim_map;
    foreach my $result (@cortex_results) {
        my $project = $result->project();

        if ($project !~ /_Sim$/ && ! $non_sim_map{$project} ) {
            next;
        }

        if ($preserve_map{$project}) {
            print "\tPreserving: $project\n";
            next;
        }

        $sim_map{$project} = $result->targetArchitectures();
    }


    my @projects = sort (keys %sim_map);
    my $project_count = scalar @projects;
    print "Found $project_count Sim projects to maybe change in $args{train}...\n";

    for (my $i = 0; $i < $project_count; $i++) {
        my $project = $projects[$i];
        my @current_arches = @{$sim_map{$project}};
        my $i1 = $i + 1;
        print "$i1 / $project_count $project Currently has @current_arches...\n";
        if (grep /i386/, @current_arches) {
            my @new_arches = grep {$_ !~ /i386/} @current_arches;
            print "\tSetting to @new_arches\n";

            if ($args{execute}) {
                $cortex->setProjectRule(
                    train => $args{train},
                    project => $project,
                    targetArchitectures => \@new_arches,
                );
            }

            if ($args{output}) {
                print $output_handle "$project\n";
            }
        }
    }

    if ( ! $args{execute} ) {
        print "You must run with -execute for the changes to take affect...\n";
    }
}

main();
