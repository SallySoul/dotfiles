#!/usr/bin/perl
#perltidy options: -npro -pbp -l=100

BEGIN {
    our $BNI = (getpwnam('bni'))[7];
    do "$BNI/plib/InitBNI.pm" or die $@;
}

use strict;
use warnings;
use Getopt::Long;
use ReleaseData;
use Cortex;

sub usage {
    print "$_[0]\n" if $_[0];

    my $message = "A tool that will discover the sync graph starting from a specified train.
Usage:
    trainGraph [OPTIONS]

Options: -help                   Print the usage
    -train                  Defaults to \$TRAIN
    -verbose                Prints extra information about actions taken
    -exploreSyncedTo        If enabled, having a train in a .syncedTo file will be sufficient to explore it. 
                            Be careful, this option greatly increases the search space. 
";

    print $message;

    exit 1;
}

sub parseArgs {
    my %args;

    usage() unless GetOptions(
        \%args,  'help', 'train=s', 'exploreSyncedTo'
    );

    usage() if $args{'help'};

    if (!$args{'train'}) {
        $args{'train'} = $ENV{'TRAIN'};
    }

    return %args;
}

# Train_ref
# 'name'    => // Train name
# 'to'      => // Contents of SyncedTo
# 'from'    => // list ref of trains that sync to this train
# 'target'  => // deploymentTarget from cortex

sub newTrain{
    my $name = shift; 
    my %result;
    $result{'name'} = $name;
    my @fromList;
    $result{'from'} = \@fromList;
    my @alignedList;

    return \%result;
}

sub printTrain {
    my $trainRef = shift;

    print "+++ Train Printout +++\n";
    print "Name: ${$trainRef}{'name'}\n";
    if (${$trainRef}{'target'}) {
        print "Target: ${$trainRef}{'target'}\n";
    } else {
        print "Target: undef\n";
    }
    if (${$trainRef}{'to'}) {
        print "SyncedTo: ${$trainRef}{'to'}\n";
    }
    if (${$trainRef}{'from'}) {
        print "From:\n";
        foreach my $trainName (@{${$trainRef}{'from'}}) {
        print "\t\t${$trainRef}{'name'}\n";
        }
    }
    print "+++ Printout complete +++\n\n";
}

sub getSyncedTo {
    my $trainRef = shift;

    # This can throw an exception (read: temper tantrum) for several reasons
    my $viewPath;
    eval {
        $viewPath = ReleaseData::viewPathForRelease(${$trainRef}{'name'});
    };
    if ($@) {
        print "viewPathForRelease Error:\n\t$@\n";
        return "";
    }
   
    my $syncedToUpdate; 
    eval {
        open (SYNCEDTO, '<', "$viewPath/.syncedTo") or die "Could not open $viewPath/.syncedTo: $!\n";
        chomp($syncedToUpdate = <SYNCEDTO>);
        close (SYNCEDTO);
    };
    if ($@) {
        print "open syncedto error:\n\t$@\n";
        return "";
    }
    
    my $syncedToTrain;
    eval {
        $syncedToTrain = ReleaseData::releaseForUpdate($syncedToUpdate);     
    };
    if ($@) {
        print "releaseForUpdate Error: \n\t$@\n";
        return undef;
    }

    return $syncedToTrain;
}

sub getAllEbuildTrains {
    my $cortex = Cortex->new();

    my @cortexResults = $cortex->listTrainAttributes (
        returnFields => [ 'train', 'buildEngineers' ],
    );
    
    my @trainRefs;
    foreach my $t (@cortexResults) {
        if ( grep( /ebuild-be\@group.apple.com/, $t->buildEngineers()) || grep(/ebuild-notifications\@group.apple.com/, $t->buildEngineers())) {
            my $name = $t->train();
            print "ebuild train: $name\n";
            my $t_ref = newTrain($t->train());
            push(@trainRefs, $t_ref);
        }
    }

    return @trainRefs;
}

sub explore {
    my $initialName = shift;
    my $trainRefHash = shift;
    
    my $cortex = Cortex->new();
    my @trainRefsToExplore = getAllEbuildTrains();
    my $initialTrainRef = newTrain($initialName);
    push @trainRefsToExplore, ($initialTrainRef);
    
    # If a train is in the trainRefHash, then it has been through this loop.
    while (scalar @trainRefsToExplore > 0) {
        my $curTrainRef = pop(@trainRefsToExplore);

        # get the things from cortex
        my @cortexResults = $cortex->listTrainAttributes(
            train => ${$curTrainRef}{'name'},
            returnFields => [ 'forwardsTo' ],
        );

        # get the deployment target, helps with layout
        #${$curTrainRef}{'target'} = $cortexResults[0]->deploymentTarget();

        # get the forwards to
        eval {
        foreach my $trainName ($cortexResults[0]->forwardsTo()) {
            push ${$curTrainRef}{'from'}, ($trainName);
            if (!${$trainRefHash}{$trainName}) {
                my $trainRef = newTrain($trainName);
                push @trainRefsToExplore, ($trainRef);
            }
        }
    };
        
        # deal with the synced To train
        my $syn = getSyncedTo($curTrainRef);
        ${$curTrainRef}{'to'} = $syn;
        if ($syn && !${$trainRefHash}{$syn}) {
            my $synTrainRef = newTrain($syn);
            push @trainRefsToExplore, ($synTrainRef);
        }

        # Lastly, this train has been explored, it an be put in the trainRefHash
        ${$trainRefHash}{${$curTrainRef}{'name'}} = $curTrainRef;
    }
}

sub printDotFile {
    my $trainRefHash = shift;
    my $outputFilePath = shift;
    
    my $oH;
    eval {
        open ($oH, '>', $outputFilePath) or die "Could not open the file!\n";
    };
    if ($@) {
        print "open dot file output Error:\n\t$@";
        return undef;
    }
    
    print $oH "digraph Trains {\n";
    foreach my $trainName (sort keys %{$trainRefHash}) {
        my $trainRef = ${$trainRefHash}{$trainName};
        my $trainName = ${$trainRef}{'name'};
        if (${$trainRef}{'to'}) {
            print $oH "\t$trainName -> ${$trainRef}{'to'} [color=red];\n";
        }
        foreach my $from (sort @{${$trainRef}{'from'}}) {
            print $oH "\t$trainName -> $from [color=blue];\n";
        }
    }
   print $oH "}\n"; 

   close $oH;
}

sub main {
    my %args = parseArgs();
    
    print "Printing args:\n";
    foreach my $k (keys %args) {
        print "$k\t$args{$k}\n";
    }

    my %trainRefHash;
    explore($args{'train'}, \%trainRefHash);
    
    foreach my $trainName (keys %trainRefHash) {
        printTrain($trainRefHash{$trainName});
    }

    printDotFile(\%trainRefHash, "/Network/Servers/nwna39a.apple.com/vol/homedir1/russell_bentley/temp/dotFile.txt");
 }

 main();
